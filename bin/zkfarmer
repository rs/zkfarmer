#!/usr/bin/env python
#
# This file is part of the zkfarmer package.
# (c) Olivier Poitrey <rs@dailymotion.com>
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/..')

from zkfarmer.conf import Conf
from zkfarmer.utils import create_filter, dict_filter, ColorizingStreamHandler
from zkfarmer import ZkFarmer

from kazoo.client import KazooClient

import logging

def main():
    import argparse
    from signal import signal, SIGTERM, SIGINT

    parser = argparse.ArgumentParser(description='Register the current host as a node of a service defined by a zookeeper node path on ' +
                                     'one side and export the farm node list into a configuration file on the other side. ' +
                                     'Additionnaly, each node can carry its own configuration.',
                                     epilog='All your farms are belong to us')

    parser.add_argument('-V', '--version', action='version', version='%(prog)s 0.1.0')
    parser.add_argument('-H', '--host', dest='host', default=os.environ.get('ZKHOST', 'localhost:2181'),
                        help='list of zookeeper hosts:port sperated by commas')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-q', '--quiet', dest='quiet', action='store_true',
                       help='lower the log level so only warnings and errors are logged')
    group.add_argument('-v', '--verbose', dest='verbose', action='store_true',
                       help='raise the log level to DEBUG')

    subparsers = parser.add_subparsers(title='subcommands', dest='command')
    subparsers.add_parser('join')

    # The `join' sub-command
    subparser = subparsers.add_parser('join', help='make the current host to join a farm',
                                      description='Make the current host to join a farm.')
    subparser.add_argument('zknode', help='the ZooKeeper node path of the farm')
    subparser.add_argument('conf', help='Path to the node configuration')
    subparser.add_argument('-f', '--format', dest='format', choices=['json', 'yaml', 'php', 'dir'],
                           help='set the configuration format')

    # The `export' sub-command
    subparser = subparsers.add_parser('export', help='exports and maintain farm\'s nodes configuration',
                                      description='Export and maintain a representation of the current farm\' nodes\' list ' +
                                                  'with configuration to a local configuration file.')
    subparser.add_argument('zknode', help='the ZooKeeper node path to the farm')
    subparser.add_argument('conf', help='path to the local configuration')
    subparser.add_argument('-f', '--format', dest='format', choices=['json', 'yaml', 'php', 'dir'],
                           help='set the configuration format')
    subparser.add_argument('-c', '--changed-cmd', dest='changed_cmd', metavar='CMD',
                           help='a command to be executed each time the configuration change')
    subparser.add_argument('-F', '--filters', dest='filters',
                           help='filter out nodes which doesn\'t match supplied predicates separeted by commas ' +
                                '(ex: enabled=0,replication_delay<10,!maintenance)')

    # The `ls' sub-command
    subparser = subparsers.add_parser('ls', help='get the list of nodes', description='Get the list of nodes.')
    subparser.add_argument('zknode', help='the ZooKeeper node path to the farm')
    subparser.add_argument('--fields', help='list of node fields to output separated by commas')
    subparser.add_argument('-F', '--filters', dest='filters',
                           help='filter out nodes which doesn\'t match supplied predicates separeted by commas ' +
                                '(ex: enabled=0,replication_delay<10,!maintenance)')

    # The `get' sub-command
    subparser = subparsers.add_parser('get', help='get the node or farm information',
                                      description='Get node or farm information. If the optional <field> is specified, ' +
                                                  'return the field\'s value. Otherwise, dump the whole configuration ' +
                                                  'using the specified format.')
    subparser.add_argument('zknode', help='the ZooKeeper node path to the farm or node')
    subparser.add_argument('field', nargs='?', default='*', help='the path of the field to return')
    subparser.add_argument('-f', '--format', dest='format', choices=['json', 'yaml', 'php'], default='yaml',
                           help='set the configuration format (default is yaml)')

    # The `set' sub-command
    subparser = subparsers.add_parser('set', help='set the value of a field of a given node or farm',
                                      description='Set the value of a field of a given node or farm.')
    subparser.add_argument('zknode', help='the ZooKeeper node path to the farm or node')
    subparser.add_argument('field', help='the path of the field to set')
    subparser.add_argument('value', help='the new value')

    # The 'unset' sub-command
    subparser = subparsers.add_parser('unset', help='unset a field of a given node or farm',
                                      description='Unset a field of a given node or farm.')
    subparser.add_argument('zknode', help='the ZooKeeper node path to the farm or node')
    subparser.add_argument('field', help='the path of the field to unset')

    # The `check' sub-command
    subparser = subparsers.add_parser('check', help='check the health of a given farm',
                                      description='Check a farm health regarding the number of failed node and return nagios compatible output. ' +
                                                  'Failed node are max farm node - currently healthy nodes. ' +
                                                  'Healthy nodes are by default all nodes currently in the farm. ' +
                                                  'You may edit the `running_filter\' farm property to filter out nodes maching ' +
                                                  'criteria to counter as healthy node. ' +
                                                  'The farm max node is stored in the `size\' farm property and is ' +
                                                  'raised by the `join\' command with the farm is extended.' +
                                                  'If you shrink the farm, you may edit this property by hand.')
    subparser.add_argument('zknode', help='the ZooKeeper node path to the farm')
    subparser.add_argument('-c', '--max-failed-node', default='10%',
                           help='the max allowed number of failed nodes, can be a number or a percentage (default 10%%)')
    subparser.add_argument('-w', '--warn-failed-node',
                           help='if defined, number of failed node at which a warning will be returned (must be lower than MAX_FAILED_NODE)')

    # The `exec' sub-command
    subparser = subparsers.add_parser('exec', help='execute a local command',
                                      description='This sub-command executes a local command in respect to various farm conditions and block ' +
                                                  'until all conditions aren\'t met (will block forever if `--repeat\' option is used). ' +
                                                  'A lock can be acquired before to execute the command and can require that no more than ' +
                                                  'N other clients aquired the lock before the local command is executed. ' +
                                                  'A node property can be changed as soon as the command is executed, and restored to its ' +
                                                  'previous value as soon command exit. ' +
                                                  'The command can be prevented from being launched until the farm isn\'t healthy (see the ' +
                                                  '`check\' sub-command). ' +
                                                  'Black hours can be set to prevent the command from being executed during peak hours. ' +
                                                  'The command can be executed repetidely with given minimum delay between executions with ' +
                                                  'respect to all other defined constraints.')
    subparser.add_argument('zknode', help='the ZooKeeper node path to the farm')
    subparser.add_argument('-l', '--lock', metavar='LOCK_NAME', help='acquires a lock before to execute the command')
    subparser.add_argument('-c', '--concurrency', default=1, help='allow N other concurrent clients to acquire the same lock (default 1)')
    subparser.add_argument('-s', '--set', help='set a node field just before execution and restore it once done (foramt field.path=value')
    subparser.add_argument('-a', '--allowed-hour-ranges', default='0-24',
                           help='Ranges of hours between when the command can be launched, outside of those range, this command will block ' +
                                'until next allowed range.')
    subparser.add_argument('-r', '--repeat', metavar='DELAY', help='repeat the command with a minimum delay of DELAY in respect of other ' +
                                                                   'conditions (this option makes the command to block forever, you should ' +
                                                                   'use something like upstart to launch it')

    args = parser.parse_args()

    if args.verbose:
        level = logging.DEBUG
    elif args.quiet:
        level = logging.WARN
    else:
        level = logging.WARN

    # Setup a nice logging output
    logger = logging.getLogger()
    logger.addHandler(ColorizingStreamHandler())
    logger.setLevel(level)

    try:
        if args.zknode[0] is not "/":
            parser.error('First argument must be the full path to the zookeeper node to create (eg: /services/db)')
    except AttributeError:
        # the subcommand have no znode
        pass

    try:
        conf = Conf(args.conf, args.format)
    except AttributeError:
        # the subcommand have no conf
        pass
    except ValueError, e:
        parser.error(e)
        exit(1)

    zkconn = KazooClient(args.host, max_retries=5)
    zkconn.start()

    def sighandler(sig, frame):
        zkconn.stop()
        exit()

    signal(SIGTERM, sighandler)
    signal(SIGINT, sighandler)

    farmer = ZkFarmer(zkconn)

    if args.command == 'export':
        def updated_handler():
            if args.changed_cmd:
                os.system(args.changed_cmd)
        farmer.export(args.zknode, conf, updated_handler, args.filters)

    elif args.command == 'join':
        farmer.join(args.zknode, conf)

    elif args.command == 'ls':
        fields = args.fields.split(',') if args.fields else []
        filter_handler = create_filter(args.filters)

        for name in farmer.list(args.zknode):
            if fields or args.filters:
                info = farmer.get('%s/%s' % (args.zknode.rstrip('/'), name))
                if args.filters and not filter_handler(info):
                    continue
                if info:
                    fields_data = []
                    for key, val in dict_filter(info, fields).items():
                        if val == dict:
                            continue
                        if val is None:
                          val = "None" 
                        fields_data.append('='.join([key, val]))
                    print '%-20s %s' % (name[0:20], ', '.join(fields_data))
                    continue
            print name

    elif args.command == 'get':
        if args.field == '*':
            conf = Conf('-', args.format)
            info = farmer.get(args.zknode)
            conf.write(info)
        else:
            print farmer.get(args.zknode, args.field)

    elif args.command == 'set':
        farmer.set(args.zknode, args.field, args.value)

    elif args.command == 'unset':
        farmer.unset(args.zknode, args.field)

    elif args.command == 'check':
        (status, reason) = farmer.check(args.zknode, args.max_failed_node, args.warn_failed_node)
        if status == farmer.STATUS_OK:
            label = 'OK'
        elif status == farmer.STATUS_WARNING:
            label = 'WARNING'
        elif status == farmer.STATUS_CRITICAL:
            label = 'CRITICAL'
        elif status == farmer.STATUS_UNKNOWN:
            label = 'UNKNOWN'

        print '%s: %s' % (label, reason)
        exit(status)

    elif args.command == 'exec':
        raise NotImplementedError('This sub-command is not implemented yet')

    else:
        parser.error('Unsupported command: %s' % args.command)


if __name__ == "__main__":
    main()
